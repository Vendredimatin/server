/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 09:05:55 GMT 2019
 */

package app.server.vo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import app.server.vo.CourseVO;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CourseVO_ESTest extends CourseVO_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      courseVO0.setTeacherName("");
      courseVO0.hashCode();
      assertFalse(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      courseVO0.setName("b1[ZLX'=FDE?$=>M4");
      courseVO0.hashCode();
      assertFalse(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      CourseVO courseVO1 = new CourseVO();
      courseVO0.setTeacherName("\"J}=");
      assertFalse(courseVO0.equals((Object)courseVO1));
      
      courseVO1.setTeacherName("\"J}=");
      boolean boolean0 = courseVO1.equals(courseVO0);
      assertTrue(courseVO0.equals((Object)courseVO1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      courseVO0.setName("CourseVO(ID=null, name=null, teacherName=null, scoreList=[], anonymous=false)");
      CourseVO courseVO1 = new CourseVO();
      assertFalse(courseVO1.equals((Object)courseVO0));
      
      courseVO1.setName("CourseVO(ID=null, name=null, teacherName=null, scoreList=[], anonymous=false)");
      boolean boolean0 = courseVO0.equals(courseVO1);
      assertTrue(courseVO1.equals((Object)courseVO0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      boolean boolean0 = courseVO0.equals(courseVO0);
      assertTrue(boolean0);
      assertFalse(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      assertFalse(courseVO0.isAnonymous());
      
      courseVO0.setAnonymous(true);
      assertTrue(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CourseVO courseVO0 = new CourseVO("m/d08o?XUc[hkE<kHr3", "m/d08o?XUc[hkE<kHr3", ")HcKb\"KX}p@.=y", linkedList0, true);
      boolean boolean0 = courseVO0.isAnonymous();
      assertEquals("m/d08o?XUc[hkE<kHr3", courseVO0.getName());
      assertEquals(")HcKb\"KX}p@.=y", courseVO0.getTeacherName());
      assertEquals("m/d08o?XUc[hkE<kHr3", courseVO0.getID());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      courseVO0.getTeacherName();
      assertFalse(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      courseVO0.setTeacherName(":>");
      courseVO0.getTeacherName();
      assertFalse(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(43);
      vector0.add(integer0);
      courseVO0.setScoreList(vector0);
      courseVO0.getScoreList();
      assertFalse(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      CourseVO courseVO0 = new CourseVO("T)LB", "T)LB", "T)LB", arrayList0, true);
      courseVO0.getName();
      assertTrue(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      courseVO0.setName("");
      courseVO0.getName();
      assertFalse(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      List<Integer> list0 = courseVO0.getScoreList();
      CourseVO courseVO1 = new CourseVO("$VALUES", "$VALUES", "$VALUES", list0, true);
      courseVO1.getID();
      assertTrue(courseVO1.isAnonymous());
      assertFalse(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      courseVO0.setID("");
      courseVO0.getID();
      assertFalse(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      courseVO0.canEqual(courseVO0);
      assertFalse(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      Integer integer0 = new Integer(1);
      courseVO0.canEqual(integer0);
      assertFalse(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      List<Integer> list0 = arrayList0.subList(0, 0);
      CourseVO courseVO0 = new CourseVO("", "", ", scoreList=", list0, false);
      Integer integer0 = new Integer(0);
      arrayList0.add(integer0);
      // Undeclared exception!
      try { 
        courseVO0.toString();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      boolean boolean0 = courseVO0.isAnonymous();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO("", "", "", (List<Integer>) null, true);
      courseVO0.getTeacherName();
      assertTrue(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      courseVO0.getID();
      assertFalse(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO("", "", "", (List<Integer>) null, true);
      courseVO0.getScoreList();
      assertTrue(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      courseVO0.getName();
      assertFalse(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      CourseVO courseVO0 = new CourseVO("T)LB", "T)LB", "T)LB", arrayList0, true);
      CourseVO courseVO1 = new CourseVO("T)LB", "T)LB", "T)LB", arrayList0, false);
      boolean boolean0 = courseVO0.equals(courseVO1);
      assertFalse(courseVO1.isAnonymous());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = Integer.valueOf(128);
      arrayList0.add(integer0);
      CourseVO courseVO0 = new CourseVO();
      CourseVO courseVO1 = new CourseVO((String) null, (String) null, (String) null, arrayList0, true);
      boolean boolean0 = courseVO0.equals(courseVO1);
      assertFalse(courseVO0.isAnonymous());
      assertFalse(boolean0);
      assertTrue(courseVO1.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      CourseVO courseVO0 = new CourseVO("", "", "", (List<Integer>) null, true);
      CourseVO courseVO1 = new CourseVO("", "", "", arrayList0, true);
      assertFalse(courseVO1.equals((Object)courseVO0));
      
      courseVO1.setScoreList((List<Integer>) null);
      boolean boolean0 = courseVO0.equals(courseVO1);
      assertTrue(courseVO1.equals((Object)courseVO0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      courseVO0.setTeacherName(":>");
      CourseVO courseVO1 = new CourseVO();
      boolean boolean0 = courseVO0.equals(courseVO1);
      assertFalse(courseVO1.isAnonymous());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      CourseVO courseVO1 = new CourseVO();
      assertTrue(courseVO1.equals((Object)courseVO0));
      
      courseVO0.setTeacherName("\"J}=");
      boolean boolean0 = courseVO1.equals(courseVO0);
      assertFalse(courseVO0.equals((Object)courseVO1));
      assertFalse(courseVO1.equals((Object)courseVO0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      CourseVO courseVO1 = new CourseVO();
      assertTrue(courseVO1.equals((Object)courseVO0));
      
      courseVO1.setName("s5YhW3s");
      boolean boolean0 = courseVO0.equals(courseVO1);
      assertFalse(courseVO1.equals((Object)courseVO0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      CourseVO courseVO1 = new CourseVO("s5YhW3s", "s5YhW3s", "s5YhW3s", arrayList0, false);
      boolean boolean0 = courseVO1.equals(courseVO0);
      assertFalse(boolean0);
      assertFalse(courseVO0.isAnonymous());
      assertFalse(courseVO1.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      CourseVO courseVO1 = new CourseVO("s5YhW3s", "s5YhW3s", "s5YhW3s", arrayList0, false);
      boolean boolean0 = courseVO0.equals(courseVO1);
      assertFalse(courseVO1.isAnonymous());
      assertFalse(boolean0);
      assertFalse(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      CourseVO courseVO0 = new CourseVO("", "", "", (List<Integer>) null, true);
      CourseVO courseVO1 = new CourseVO("", "", "", arrayList0, true);
      boolean boolean0 = courseVO0.equals(courseVO1);
      assertFalse(courseVO1.equals((Object)courseVO0));
      assertFalse(boolean0);
      assertTrue(courseVO1.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      CourseVO courseVO0 = new CourseVO("", "", ", scoreList=", arrayList0, false);
      boolean boolean0 = courseVO0.equals((Object) null);
      assertEquals(", scoreList=", courseVO0.getTeacherName());
      assertEquals("", courseVO0.getName());
      assertEquals("", courseVO0.getID());
      assertFalse(boolean0);
      assertFalse(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO("> [OL<D", "> [OL<D", "> [OL<D", (List<Integer>) null, true);
      courseVO0.hashCode();
      assertTrue(courseVO0.isAnonymous());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CourseVO courseVO0 = new CourseVO();
      courseVO0.setName("CourseVO(ID=null, name=null, teacherName=null, scoreList=[], anonymous=false)");
      CourseVO courseVO1 = new CourseVO();
      boolean boolean0 = courseVO0.equals(courseVO1);
      assertFalse(courseVO1.isAnonymous());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      CourseVO courseVO0 = new CourseVO("", "", ", scoreList=", arrayList0, false);
      String string0 = courseVO0.toString();
      assertEquals("CourseVO(ID=, name=, teacherName=, scoreList=, scoreList=[], anonymous=false)", string0);
  }
}
